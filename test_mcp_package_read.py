#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ Cline
"""

import asyncio
import json
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def test_mcp_package_read():
    """–¢–µ—Å—Ç—É—î MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–∞"""
    print("=" * 80)
    print("–¢–ï–°–¢ MCP –°–ï–†–í–ï–†–ê –î–õ–Ø –ß–ò–¢–ê–ù–ù–Ø –ü–ê–ö–ï–¢–ê")
    print("=" * 80)
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞
        server_params = StdioServerParameters(
            command="python",
            args=["mcp_server.py"],
            env=None
        )
        
        print("üîÑ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞...")
        
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
                print("\nüîß –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
                tools = await session.list_tools()
                
                print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(tools.tools)} —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
                for tool in tools.tools:
                    print(f"   ‚Ä¢ {tool.name}: {tool.description}")
                
                # –®—É–∫–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_package_structure
                package_tool = None
                for tool in tools.tools:
                    if tool.name == "get_package_structure":
                        package_tool = tool
                        break
                
                if not package_tool:
                    print("‚ùå –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_package_structure –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                    return False
                
                print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {package_tool.name}")
                print(f"üìù –û–ø–∏—Å: {package_tool.description}")
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–∞ ZOK_LAB
                print(f"\nüîÑ –ß–∏—Ç–∞—î–º–æ –ø–∞–∫–µ—Ç ZOK_LAB —á–µ—Ä–µ–∑ MCP...")
                
                result = await session.call_tool(
                    "get_package_structure",
                    arguments={"package_name": "ZOK_LAB"}
                )
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç MCP –≤–∏–∫–ª–∏–∫—É:")
                print(f"   –¢–∏–ø: {type(result)}")
                
                if hasattr(result, 'content') and result.content:
                    content = result.content[0]
                    if hasattr(content, 'text'):
                        # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                        try:
                            data = json.loads(content.text)
                            if isinstance(data, list):
                                print(f"‚úÖ –£–°–ü–Ü–®–ù–û –ü–†–û–ß–ò–¢–ê–ù–û –ü–ê–ö–ï–¢ –ß–ï–†–ï–ó MCP!")
                                print(f"üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±'—î–∫—Ç—ñ–≤: {len(data)}")
                                
                                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö
                                types_count = {}
                                for obj in data:
                                    obj_type = obj.get('OBJECT_TYPE', 'Unknown')
                                    types_count[obj_type] = types_count.get(obj_type, 0) + 1
                                
                                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö:")
                                for obj_type, count in sorted(types_count.items()):
                                    print(f"   {obj_type}: {count}")
                                
                                print(f"\nüìã –ü–µ—Ä—à—ñ 5 –æ–±'—î–∫—Ç—ñ–≤:")
                                for i, obj in enumerate(data[:5]):
                                    name = obj.get('OBJECT_NAME', 'No name')
                                    obj_type = obj.get('OBJECT_TYPE', 'Unknown')
                                    desc = obj.get('OBJECT_DESCRIPTION', 'No description')
                                    print(f"   {i+1}. {obj_type}: {name} - {desc}")
                                
                                return True
                            else:
                                print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö: {type(data)}")
                                print(f"üìÑ –î–∞–Ω—ñ: {data}")
                                return False
                        except json.JSONDecodeError as e:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
                            print(f"üìÑ –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {content.text}")
                            return False
                    else:
                        print(f"‚ùå –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                        print(f"üìÑ Content: {content}")
                        return False
                else:
                    print(f"‚ùå –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ")
                    print(f"üìÑ Result: {result}")
                    return False
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ MCP: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    print("–¢–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–∞ ZOK_LAB")
    print("–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—Ä–∞—Ü—é—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π package_structure.py —á–µ—Ä–µ–∑ MCP")
    print("=" * 80)
    
    success = await test_mcp_package_read()
    
    print("\n" + "=" * 80)
    print("–ü–Ü–î–°–£–ú–û–ö MCP –¢–ï–°–¢–£")
    print("=" * 80)
    
    if success:
        print("üéâ MCP –°–ï–†–í–ï–† –ü–†–ê–¶–Æ–Ñ –ó –í–ò–ü–†–ê–í–õ–ï–ù–ò–ú –ö–û–î–û–ú!")
        print("‚úÖ Cline —Ç–µ–ø–µ—Ä –º–æ–∂–µ —á–∏—Ç–∞—Ç–∏ –ø–∞–∫–µ—Ç–∏ —á–µ—Ä–µ–∑ MCP")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º—É –∑ cookies –≤–∏—Ä—ñ—à–µ–Ω–æ –≤ MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ")
    else:
        print("‚ùå MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("üí° –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ MCP —Å–µ—Ä–≤–µ—Ä")
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())
